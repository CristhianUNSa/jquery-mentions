// Generated by CoffeeScript 1.6.3
(function() {
  var Key, MentionsInput, Selection, mimicProperties, namespace, settings,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  namespace = "mentionsInput";

  Key = {
    LEFT: 37,
    RIGHT: 39
  };

  mimicProperties = ['marginTop', 'marginBottom', 'marginLeft', 'marginRight', 'paddingTop', 'paddingBottom', 'paddingLeft', 'paddingRight', 'borderTopWidth', 'borderLeftWidth', 'borderBottomWidth', 'borderRightWidth', 'fontSize', 'fontStyle', 'fontFamily', 'lineHeight', 'height', 'backgroundColor'];

  Selection = {
    get: function(input) {
      return {
        start: input[0].selectionStart,
        end: input[0].selectionEnd
      };
    },
    set: function(input, start, end) {
      if (end == null) {
        end = start;
      }
      return input[0].setSelectionRange(start, end);
    }
  };

  settings = {
    source: [],
    delay: 0,
    trigger: '@'
  };

  $.widget("ui.areacomplete", $.ui.autocomplete, {
    options: $.extend({}, $.ui.autocomplete.prototype.options, {
      matcher: "(\\b[^,]*)",
      suffix: ', '
    }),
    _create: function() {
      this.overriden = {
        select: this.options.select,
        focus: this.options.focus
      };
      this.options.select = $.proxy(this.selectCallback, this);
      this.options.focus = $.proxy(this.focusCallback, this);
      $.ui.autocomplete.prototype._create.call(this);
      return this.matcher = new RegExp(this.options.matcher + '$');
    },
    selectCallback: function(event, ui) {
      var after, before, newval, value;
      value = this._value();
      before = value.substring(0, this.start);
      after = value.substring(this.end);
      newval = ui.item.value + this.options.suffix;
      value = before + newval + after;
      if (this.overriden.select) {
        ui.item.pos = this.start;
        if (this.overriden.select(event, ui) === false) {
          return false;
        }
      }
      this._value(value);
      this.element.change();
      Selection.set(this.element, before.length + newval.length);
      return false;
    },
    focusCallback: function() {
      if (this.overriden.focus) {
        return this.overriden.focus(event, ui);
      }
      return false;
    },
    search: function(value, event) {
      var match, pos;
      if (!value) {
        value = this._value();
        pos = Selection.get(this.element).start;
        value = value.substring(0, pos);
        match = this.matcher.exec(value);
        if (!match) {
          return '';
        }
        this.start = match.index;
        this.end = match.index + match[0].length;
        value = match[1];
      }
      return $.ui.autocomplete.prototype.search.call(this, value, event);
    },
    _renderItem: function(ul, item) {
      var anchor, li;
      li = $('<li>');
      anchor = $('<a>').appendTo(li);
      if (item.image) {
        anchor.append("<img src=\"" + item.image + "\" />");
      }
      anchor.append(item.value);
      return li.appendTo(ul);
    }
  });

  MentionsInput = (function() {
    MentionsInput.prototype.marker = '\uFEFF';

    function MentionsInput(input, options) {
      var container;
      this.input = input;
      this.updateHScroll = __bind(this.updateHScroll, this);
      this.updateVScroll = __bind(this.updateVScroll, this);
      this.updateValue = __bind(this.updateValue, this);
      this.onSelect = __bind(this.onSelect, this);
      this.addMention = __bind(this.addMention, this);
      this.updateMentions = __bind(this.updateMentions, this);
      this.update = __bind(this.update, this);
      this.mark = __bind(this.mark, this);
      this.handleLeftRight = __bind(this.handleLeftRight, this);
      this.mentions = [];
      this.options = $.extend(settings, options);
      this.input.addClass('input');
      container = $('<div>', {
        'class': 'mentions-input'
      });
      container.css('display', this.input.css('display'));
      this.container = this.input.wrapAll(container).parent();
      this.hidden = this.createHidden();
      this.highlighter = this.createHighlighter();
      this.highlighterContent = $('div', this.highlighter);
      this.autocomplete = this.input.areacomplete({
        matcher: this.getMatcher(),
        suffix: this.marker,
        select: this.onSelect,
        source: this.options.source,
        delay: this.options.delay
      });
      this.initValue();
      this.initEvents();
    }

    MentionsInput.prototype.initEvents = function() {
      var tagName,
        _this = this;
      this.input.on('input', this.update);
      this.input.on('change', this.update);
      this.input.on('keydown', function(event) {
        return setTimeout((function() {
          return _this.handleLeftRight(event);
        }), 10);
      });
      tagName = this.input.prop("tagName");
      if (tagName === "INPUT") {
        this.input.on('focus', function() {
          return _this.interval = setInterval(_this.updateHScroll, 10);
        });
        return this.input.on('blur', function() {
          setTimeout(_this.updateHScroll, 10);
          return clearInterval(_this.interval);
        });
      } else if (tagName === "TEXTAREA") {
        this.input.on('scroll', (function() {
          return setTimeout(_this.updateVScroll, 10);
        }));
        return this.input.on('resize', (function() {
          return setTimeout(_this.updateVScroll, 10);
        }));
      }
    };

    MentionsInput.prototype.initValue = function() {
      var markedValue, match, mentionRE, pos, value;
      value = this.input.val();
      mentionRE = /@\[([\w ]+)\]\(([:\w]+)\)/g;
      markedValue = value.replace(mentionRE, this.mark('$1'));
      this.input.val(markedValue);
      match = mentionRE.exec(value);
      while (match) {
        this.addMention({
          name: match[1],
          uid: match[2]
        }, pos = markedValue.indexOf(this.mark(match[1])));
        match = mentionRE.exec(value);
      }
      return this.updateValue();
    };

    MentionsInput.prototype.createHidden = function() {
      var hidden;
      hidden = $('<input>', {
        type: 'hidden',
        name: this.input.attr('name')
      });
      hidden.appendTo(this.container);
      this.input.removeAttr('name');
      return hidden;
    };

    MentionsInput.prototype.createHighlighter = function() {
      var content, highlighter, property, _i, _len;
      highlighter = $('<div>', {
        'class': 'highlighter'
      });
      highlighter.prependTo(this.container);
      content = $('<div>', {
        'class': 'highlighter-content'
      });
      highlighter.append(content);
      for (_i = 0, _len = mimicProperties.length; _i < _len; _i++) {
        property = mimicProperties[_i];
        highlighter.css(property, this.input.css(property));
      }
      this.input.css('backgroundColor', 'transparent');
      return highlighter;
    };

    MentionsInput.prototype.getMatcher = function() {
      var allowedChars;
      allowedChars = '[^' + this.options.trigger + ']';
      return '\\B[' + this.options.trigger + '](' + allowedChars + '{0,20})';
    };

    MentionsInput.prototype.handleLeftRight = function(event) {
      var delta, deltaEnd, deltaStart, sel, value;
      if (event.keyCode === Key.LEFT || event.keyCode === Key.RIGHT) {
        value = this.input.val();
        sel = Selection.get(this.input);
        delta = event.keyCode === Key.LEFT ? -1 : 1;
        deltaStart = value.charAt(sel.start) === this.marker ? delta : 0;
        deltaEnd = value.charAt(sel.end) === this.marker ? delta : 0;
        if (deltaStart || deltaEnd) {
          return Selection.set(this.input, sel.start + deltaStart, sel.end + deltaEnd);
        }
      }
    };

    MentionsInput.prototype.mark = function(name) {
      return name + this.marker;
    };

    MentionsInput.prototype.update = function() {
      this.updateMentions();
      return this.updateValue();
    };

    MentionsInput.prototype.updateMentions = function() {
      var i, index, marked, mention, newval, selection, value, _i, _len, _ref;
      value = this.input.val();
      _ref = this.mentions.slice(0);
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        mention = _ref[i];
        marked = this.mark(mention.name);
        index = value.indexOf(marked);
        if (index === -1) {
          this.mentions = this.mentions.splice(i, 1);
        } else {
          mention.pos = index;
        }
        value = this.replaceWithSpaces(value, marked);
      }
      newval = this.input.val();
      while ((index = value.indexOf(this.marker)) >= 0) {
        value = this.cutChar(value, index);
        newval = this.cutChar(newval, index);
      }
      selection = Selection.get(this.input);
      this.input.val(newval);
      return Selection.set(this.input, selection.start);
    };

    MentionsInput.prototype.addMention = function(mention) {
      return this.mentions.push(mention);
    };

    MentionsInput.prototype.onSelect = function(event, ui) {
      return this.addMention({
        name: ui.item.value,
        pos: ui.item.pos,
        uid: ui.item.uid
      });
    };

    MentionsInput.prototype.updateValue = function() {
      var hlContent, markedName, mention, value, _i, _len, _ref;
      value = hlContent = this.input.val();
      _ref = this.mentions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        mention = _ref[_i];
        markedName = this.mark(mention.name);
        hlContent = hlContent.replace(markedName, "<strong>" + mention.name + "</strong>");
        value = value.replace(markedName, "@[" + mention.name + "](" + mention.uid + ")");
      }
      this.hidden.val(value);
      return this.highlighterContent.html(hlContent);
    };

    MentionsInput.prototype.updateVScroll = function() {
      var scrollTop;
      scrollTop = this.input.scrollTop();
      this.highlighterContent.css({
        top: "-" + scrollTop + "px"
      });
      return this.highlighter.height(this.input.height());
    };

    MentionsInput.prototype.updateHScroll = function() {
      var scrollLeft;
      scrollLeft = this.input.scrollLeft();
      this.highlighterContent.css({
        left: "-" + scrollLeft + "px"
      });
      return this.highlighterContent.width(this.input.get(0).scrollWidth);
    };

    MentionsInput.prototype.replaceWithSpaces = function(value, what) {
      return value.replace(what, Array(what.length).join(' '));
    };

    MentionsInput.prototype.cutChar = function(value, index) {
      return value.substring(0, index) + value.substring(index + 1);
    };

    return MentionsInput;

  })();

  $.fn[namespace] = function(options) {
    return this.each(function() {
      return $(this).data('mentionsInput', new MentionsInput($(this), options));
    });
  };

}).call(this);
