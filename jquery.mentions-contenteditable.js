// Generated by CoffeeScript 1.7.1
(function() {
  var MentionsContenteditable, insertMention, mentionTpl, namespace, settings,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice;

  namespace = "mentionsContenteditable";

  settings = {
    delay: 0,
    trigger: '@'
  };

  mentionTpl = function(mention) {
    return "<span data-mention=\"" + mention.uid + "\">" + mention.value + "</span>";
  };

  insertMention = function(mention, pos, suffix) {
    var node, range, selection;
    selection = window.getSelection();
    node = selection.focusNode;
    range = selection.getRangeAt(0);
    range.setStart(node, pos.start);
    range.setEnd(node, pos.end);
    range.deleteContents();
    range.insertNode(mention);
    if (suffix) {
      suffix = document.createTextNode(suffix);
      $(suffix).insertAfter(mention);
      range.setStartAfter(suffix);
    } else {
      range.setStartAfter(mention);
    }
    range.collapse(true);
    selection.removeAllRanges();
    selection.addRange(range);
    return mention;
  };

  $.widget("ui.editablecomplete", $.ui.autocomplete, {
    options: $.extend({}, $.ui.autocomplete.prototype.options, {
      matcher: "(\\b[^,]*)",
      suffix: ', ',
      showAtCaret: false
    }),
    _create: function() {
      this.overriden = {
        select: this.options.select,
        focus: this.options.focus
      };
      this.options.select = $.proxy(this.selectCallback, this);
      this.options.focus = $.proxy(this.focusCallback, this);
      this.marker = $("<span id='__autocomplete-marker'/>")[0];
      $.ui.autocomplete.prototype._create.call(this);
      return this.matcher = new RegExp(this.options.matcher + '$');
    },
    selectCallback: function(event, ui) {
      var mention, pos;
      pos = {
        start: this.start,
        end: this.end
      };
      if (this.overriden.select) {
        ui.item.pos = pos;
        if (this.overriden.select(event, ui) === false) {
          return false;
        }
      }
      mention = document.createTextNode(ui.item.value);
      insertMention(mention, pos, this.options.suffix);
      this.element.change();
      return false;
    },
    focusCallback: function() {
      if (this.overriden.focus) {
        return this.overriden.focus(event, ui);
      }
      return false;
    },
    search: function(value, event) {
      var boundary, match, node, pos, range, sel;
      if (!value) {
        sel = window.getSelection();
        node = sel.focusNode;
        value = node.textContent;
        pos = sel.focusOffset;
        value = value.substring(0, pos);
        match = this.matcher.exec(value);
        if (!match) {
          return '';
        }
        this.start = match.index;
        this.end = match.index + match[0].length;
        if (this.options.showAtCaret) {
          range = sel.getRangeAt(0);
          boundary = range.cloneRange();
          boundary.setStart(node, this.start);
          boundary.collapse(true);
          boundary.insertNode(this.marker);
          boundary.detach();
          this.options.position.of = this.marker;
        }
        value = match[1];
      }
      return $.ui.autocomplete.prototype.search.call(this, value, event);
    },
    close: function(event) {
      this.marker.remove();
      this.element.change();
      return $.ui.autocomplete.prototype.close.call(this, event);
    },
    _renderItem: function(ul, item) {
      var anchor, li;
      li = $('<li>');
      anchor = $('<a>').appendTo(li);
      if (item.image) {
        anchor.append("<img src=\"" + item.image + "\" />");
      }
      anchor.append(item.value);
      return li.appendTo(ul);
    }
  });

  MentionsContenteditable = (function() {
    MentionsContenteditable.prototype.marker = '\uFEFF';

    MentionsContenteditable.prototype.selector = '[data-mention]';

    function MentionsContenteditable(input, options) {
      this.input = input;
      this._onSelect = __bind(this._onSelect, this);
      this._addMention = __bind(this._addMention, this);
      this.options = $.extend({}, settings, options);
      if (!this.options.source) {
        this.options.source = this.input.data('source') || [];
      }
      this.input.addClass('input');
      this.autocomplete = this.input.editablecomplete({
        matcher: this._getMatcher(),
        suffix: this.marker,
        select: this._onSelect,
        source: this.options.source,
        delay: this.options.delay,
        showAtCaret: true
      });
      this._initValue();
      this._initEvents();
    }

    MentionsContenteditable.prototype._initEvents = function() {
      return this.input.find(this.selector).each((function(_this) {
        return function(i, el) {
          return _this._watch(el);
        };
      })(this));
    };

    MentionsContenteditable.prototype._initValue = function() {
      var mentionRE, value;
      value = this.input.html();
      mentionRE = /@\[([^\]]+)\]\(([^ \)]+)\)/g;
      value = value.replace(mentionRE, (function(_this) {
        return function(match, value, uid) {
          return mentionTpl({
            value: value,
            uid: uid
          }) + _this.marker;
        };
      })(this));
      return this.input.html(value);
    };

    MentionsContenteditable.prototype._getMatcher = function() {
      var allowedChars;
      allowedChars = '[^' + this.options.trigger + ']';
      return '\\B[' + this.options.trigger + '](' + allowedChars + '{0,20})';
    };

    MentionsContenteditable.prototype._addMention = function(data) {
      var mention, mentionNode;
      mentionNode = $(mentionTpl(data))[0];
      mention = insertMention(mentionNode, data.pos, this.marker);
      return this._watch(mention);
    };

    MentionsContenteditable.prototype._onSelect = function(event, ui) {
      this._addMention(ui.item);
      return false;
    };

    MentionsContenteditable.prototype._watch = function(mention) {
      return mention.addEventListener('DOMCharacterDataModified', function(e) {
        var offset, range, sel, text;
        if (e.newValue !== e.prevValue) {
          text = e.target;
          sel = window.getSelection();
          offset = sel.focusOffset;
          $(mention).replaceWith(text);
          range = document.createRange();
          range.setStart(text, offset);
          range.collapse(true);
          sel.removeAllRanges();
          return sel.addRange(range);
        }
      });
    };

    MentionsContenteditable.prototype.getValue = function() {
      var value;
      value = this.input.clone();
      $(this.selector, value).replaceWith(function() {
        var name, uid;
        uid = $(this).data('mention');
        name = $(this).text();
        return "@[" + name + "](" + uid + ")";
      });
      return value.html().replace(this.marker, '');
    };

    MentionsContenteditable.prototype.clear = function() {
      this.input.html('');
      return this._update();
    };

    MentionsContenteditable.prototype.destroy = function() {
      this.input.editablecomplete("destroy");
      this.input.off("." + namespace);
      return this.input.html(this.getValue());
    };

    return MentionsContenteditable;

  })();

  Object.defineProperty(MentionsContenteditable.prototype, 'mentions', {
    get: function() {
      var mentions;
      mentions = [];
      this.input.find(this.selector).each(function() {
        return mentions.push({
          value: $(this).text(),
          uid: $(this).data('mention')
        });
      });
      return mentions;
    }
  });

  this.MentionsContenteditable = MentionsContenteditable;

  $.fn[namespace] = function() {
    var args, options, returnValue;
    options = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    returnValue = this;
    this.each(function() {
      var instance;
      if (typeof options === 'string' && options.charAt(0) !== '_') {
        instance = $(this).data('mentionsContenteditable');
        if (options in instance) {
          return returnValue = instance[options].apply(instance, args);
        }
      } else {
        return $(this).data('mentionsContenteditable', new MentionsContenteditable($(this), options));
      }
    });
    return returnValue;
  };

}).call(this);

//# sourceMappingURL=jquery.mentions-contenteditable.map
